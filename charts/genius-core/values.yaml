allowedOrigins: "*"
serviceHostname: genius-core
loglevel: info

auth:
  issuerWellKnownUri: ""
  jwksUri: ""
  defaultProvider: ""
  initialAdminUserId: ""

license:
  # -- License key from onboarding portal
  key: ""
  # -- Reference to an existing k8s secret
  keyExistingSecret:
    # -- Name of the existing secret
    name: ""
    # -- Key inside secret that contains the secret content
    key: licenseKey

  # -- Cerrtificates from onboarding portal
  tls:
    # -- Certificate from onboarding portal
    cert: ""
    # cert: |-
    #   -----BEGIN CERTIFICATE-----
    #   ...
    #   -----END CERTIFICATE-----
    # -- Private key from onboarding portal
    key: ""
    # key: |-
    #   -----BEGIN PRIVATE KEY-----
    #   -----END PRIVATE KEY-----
    # -- CA certificate from onboarding portal
    ca: ""
    # ca: |-
    #   -----BEGIN CERTIFICATE-----
    #   ...
    #   -----END CERTIFICATE-----

    # -- Reference to an existing k8s secret
    existingSecret:
      # -- Name of the existing secret
      name: ""
      # -- Key in secret that contains the secret content
      certKey: ""
      # -- Key in secret that contains the secret content
      keyKey: ""
      # -- Key in secret that contains the secret content
      caKey: ""

replicaCount: 1

image:
  repository: ghcr.io/versestech/genius-core
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  # This is the `verses` user as defined in `Dockerfile``
  fsGroup: 65532

securityContext:
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 65532
  runAsGroup: 65532

# gRPC service
service:
  type: ClusterIP
  ports:
    grpc: 50052
    ws: 8080

ingress:
  # Values for a single ingress resource
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - pathType: Prefix
          path: /
          backend:
            service:
              name: '{{ include "genius-core.fullname" . }}'
              port:
                number: '{{ .Values.service.ports.grpc }}'
    - host: chart-example-ws.local
      paths:
        - pathType: Prefix
          path: /
          backend:
            service:
              name: '{{ include "genius-core.fullname" . }}'
              port:
                number: '{{ .Values.service.ports.ws }}'
  tls: []
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local
    #     - chart-example-ws.local

  # -- Enable to create separate ingress resources for gRPC and websocket, since some
  # ingress controllers do not support multiple backend protocols using a single ingress
  separateIngresses: false

  # Ingress configuration for gRPC ingress when `.Values.ingress.separateIngresses` is set to `true`
  grpc:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      # nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
    hosts:
      - host: chart-example.local
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: '{{ include "genius-core.fullname" . }}'
                port:
                  number: '{{ .Values.service.ports.grpc }}'
    tls: []
      # - secretName: chart-example-grpc-tls
      #   hosts:
      #     - chart-example.local

  # Ingress configuration for websocket ingress when `.Values.ingress.separateIngresses` is set to `true`
  ws:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example-ws.local
        paths:
          - pathType: Prefix
            path: /
            backend:
              service:
                name: '{{ include "genius-core.fullname" . }}'
                port:
                  number: '{{ .Values.service.ports.ws }}'
    tls: []
      # - secretName: chart-example-ws-tls
      #   hosts:
      #     - chart-example-ws.local

httpRoute:
  enabled: false
  # Annotations to add to the HttpRoute
  annotations: {}
  hostnames: []
    # - chart-example.local
    # - chart-example-ws.local
  parentRefs: []
    # - name: example-gateway
    #   namespace: example-gateway-ns
    #   sectionName: example-gateway-section
  rules:
    - matches:
        - headers:
            - type: Exact
              name: host
              value: chart-example.local
          path:
            type: PathPrefix
            value: /
      backendRefs:
        - name: '{{ include "genius-core.fullname" . }}'
          port: '{{ .Values.service.ports.grpc }}'
      filters: []
        # - type: RequestHeaderModifier
        #   requestHeaderModifier:
        #     add:
        #       - name: my-header
        #         value: foo
    - matches:
        - headers:
            - type: Exact
              name: host
              value: chart-example-ws.local
          path:
            type: PathPrefix
            value: /
      backendRefs:
        - name: '{{ include "genius-core.fullname" . }}'
          port: '{{ .Values.service.ports.ws }}'
      filters: []
        # - type: RequestHeaderModifier
        #   requestHeaderModifier:
        #     add:
        #       - name: my-header
        #         value: foo

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

persistence:
  accessModes:
    - ReadWriteOnce
  storageClassName: ""
  size: 10Gi

nodeSelector: {}

tolerations: []

affinity: {}

# -- Extra env vars to add to the container
extraEnv: []
  # - name:
  #   value:

pdb:
  enabled: false
  minAvailable: ""
  maxUnavailable: ""

# -- Extra K8s manifests to deploy
## Note: Supports use of custom Helm templates
extraObjects: []
